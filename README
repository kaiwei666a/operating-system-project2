Project 3
Group members: Kai Wei, Alexander Lapsley, Ifeoluwa Olusola (Same as last project)
Modified Files: 
Created Files:


PART 1: 
Understanding sbrk() 
How page allocation is implemented in xv6 originally:
In the original xv6 implementation, the sbrk() system call works by invoking growproc(). This function not only increases the process size (proc->sz) but also allocates any needed memory pages. Specifically, growproc() calls allocuvm() to map physical memory pages into the process’s address space, thereby expanding the memory region available to the process.

What breaks when modifying sbrk and why:
By removing the call to growproc() in the sys_sbrk() function of xv6 and simply incrementing proc->sz by n, the kernel no longer allocates physical memory pages when sbrk() is invoked. This change breaks programs that rely on dynamic memory allocation via sbrk(), because any attempt to access these newly “allocated” addresses triggers an error (e.g., a segmentation fault). 
The specific error message “pid 3 sh: trap 14 err 6 on cpu 0 eip 0x1260 addr 0x4004--kill proc” typically indicates a page fault or general protection fault caused by a process trying to access unmapped or unauthorized memory. In this context, it means the process is attempting to use memory beyond its valid address space, since sbrk() no longer maps physical pages for that region.

Significance of sbrk() in xv6:
The sbrk() system call is significant because it allows a process to dynamically adjust its heap size, effectively requesting more memory from the operating system as needed. It's commonly used by programs, especially those written in C, to manage dynamic memory allocation. Programs can use functions like malloc() and free() to allocate and deallocate memory within the heap. Without proper implementation of sbrk(), programs relying on dynamic memory allocation will not function correctly, leading to errors and unexpected behavior.

Ran using windows 11 and i7 14700 and gcc 11.  Ubuntu 20.04.1 LTS